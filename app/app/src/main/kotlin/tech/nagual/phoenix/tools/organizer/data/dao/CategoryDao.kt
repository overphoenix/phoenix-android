package tech.nagual.phoenix.tools.organizer.data.dao

import androidx.room.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import tech.nagual.phoenix.tools.organizer.data.RawCategories
import tech.nagual.phoenix.tools.organizer.data.model.Category
import tech.nagual.phoenix.tools.organizer.data.model.Organizer
import tech.nagual.phoenix.tools.organizer.data.model.RawCategory
import tech.nagual.phoenix.tools.organizer.data.model.Workflow

@Dao
interface CategoryDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(category: Category): Long

    @Transaction
    suspend fun insertEverywhere(category: Category, organizer: Organizer): Long {
        val categoryId = insert(category)

        // Update in active organizer
        updateCategoriesInOrganizer(
            organizer.id,
            RawCategories.addCategory(organizer.categories, categoryId, category)
        )

        // Update in all workflows
        val workflows = getAllWorkflows(organizer.id).first()
        for (workflow in workflows) {
            updateCategoriesInWorkflow(
                workflow.id,
                RawCategories.addCategory(workflow.categories, categoryId, category)
            )
        }

        return categoryId
    }

    @Delete
    suspend fun delete(vararg categories: Category)

    @Transaction
    suspend fun deleteEverywhere(category: Category, organizer: Organizer) {
       delete(category)

        // Update in active organizer
        updateCategoriesInOrganizer(
            organizer.id,
            RawCategories.deleteCategory(organizer.categories, category.id)
        )

//        workflowRawCategories::class.members.first { it.name == method }.call(workflowRawCategories, *args)

        // Update in all workflows
        val workflows = getAllWorkflows(organizer.id).first()
        for (workflow in workflows) {
            updateCategoriesInWorkflow(
                workflow.id,
                RawCategories.deleteCategory(workflow.categories, category.id)
            )
        }
    }

    @Update
    suspend fun update(vararg categories: Category)

    @Transaction
    suspend fun updateEverywhere(category: Category, organizer: Organizer) {
        update(category)

        // Update in active organizer
        updateCategoriesInOrganizer(
            organizer.id,
            RawCategories.updateCategory(organizer.categories, category)
        )

        // Update in all workflows
        val workflows = getAllWorkflows(organizer.id).first()
        for (workflow in workflows) {
            updateCategoriesInWorkflow(
                workflow.id,
                RawCategories.updateCategory(workflow.categories, category)
            )
        }
    }

    @Query("UPDATE organizers SET categories = :categories WHERE id = :organizerId")
    suspend fun updateCategoriesInOrganizer(organizerId: Long, categories: List<RawCategory>)

    @Query("UPDATE workflows SET categories = :categories WHERE id = :workflowId")
    suspend fun updateCategoriesInWorkflow(workflowId: Long, categories: List<RawCategory>)

    @Query("SELECT * FROM categories WHERE organizerId = :organizerId")
    fun getAll(organizerId: Long): Flow<List<Category>>

    @Query("SELECT * FROM workflows WHERE organizerId = :organizerId")
    fun getAllWorkflows(organizerId: Long): Flow<List<Workflow>>

    @Query("SELECT * FROM categories WHERE id = :categoryId AND organizerId = :organizerId")
    fun getById(categoryId: Long, organizerId: Long): Flow<Category?>

    /*
        Variants = 0,
        AutoIncrement = 1,
        Geo = 2,
        DateTime = 3,
        Password = 4,
        ExVariants = 5
     */
    @Query("SELECT categories.* FROM categories INNER JOIN variants ON categories.id = variants.categoryId WHERE categories.type IN (0, 5) AND categories.organizerId = :organizerId GROUP BY categories.id")
    fun getAllNonEmpty(organizerId: Long): Flow<List<Category>>

    @Query("SELECT * FROM categories WHERE type IN (1, 2, 3, 4) AND organizerId = :organizerId GROUP BY id")
    fun getAllAutogenerated(organizerId: Long): Flow<List<Category>>

    @Query("SELECT * FROM categories WHERE name = :categoryName AND organizerId = :organizerId LIMIT 1")
    fun getByName(categoryName: String, organizerId: Long): Flow<Category?>
}
