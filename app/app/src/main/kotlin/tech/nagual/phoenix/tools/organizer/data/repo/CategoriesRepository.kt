package tech.nagual.phoenix.tools.organizer.data.repo

import android.location.Location
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import tech.nagual.phoenix.tools.gps.helpers.LocationHelper
import tech.nagual.phoenix.tools.organizer.OrganizersManager
import tech.nagual.phoenix.tools.organizer.data.dao.CategoryDao
import tech.nagual.phoenix.tools.organizer.data.dao.CategoryVariableDao
import tech.nagual.phoenix.tools.organizer.data.dao.VariantDao
import tech.nagual.phoenix.tools.organizer.data.model.*

class CategoriesRepository(
    private val categoryDao: CategoryDao,
    private val variantDao: VariantDao,
    private val categoryVariableDao: CategoryVariableDao
) {

    suspend fun insert(category: Category): Long = categoryDao.insert(category)

    suspend fun delete(vararg categories: Category) {
        categoryDao.delete(*categories)
    }

    suspend fun update(vararg categories: Category) {
        categoryDao.update(*categories)
    }

    suspend fun insertEverywhere(category: Category, organizer: Organizer): Long =
        categoryDao.insertEverywhere(category, organizer)

    suspend fun updateEverywhere(category: Category, organizer: Organizer) {
        categoryDao.updateEverywhere(category, organizer)
    }

    suspend fun deleteEverywhere(category: Category, organizer: Organizer) {
        categoryDao.deleteEverywhere(category, organizer)
    }

    fun getAll(): Flow<List<Category>> = categoryDao.getAll(OrganizersManager.activeOrganizer.id)

    fun getById(categoryId: Long): Flow<Category?> =
        categoryDao.getById(categoryId, OrganizersManager.activeOrganizer.id)

    fun getAllNonEmpty(): Flow<List<Category>> =
        categoryDao.getAllNonEmpty(OrganizersManager.activeOrganizer.id)

    fun getAllAutogenerated(): Flow<List<Category>> =
        categoryDao.getAllAutogenerated(OrganizersManager.activeOrganizer.id)

    fun getByName(name: String): Flow<Category?> =
        categoryDao.getByName(name, OrganizersManager.activeOrganizer.id)

    suspend fun setVariable(variable: CategoryVariable) {
        categoryVariableDao.insert(variable)
    }

    suspend fun deleteVariable(categoryId: Long, name: String) {
        categoryVariableDao.deleteByName(categoryId, name)
    }

    fun getVariable(categoryId: Long, name: String) =
        categoryVariableDao.getByName(categoryId, name)

    fun getAllVariables() = categoryVariableDao.getAll()

    fun getAllVariablesForCategory(categoryId: Long) =
        categoryVariableDao.getAllForCategory(categoryId)

    suspend fun insertVariant(variant: Variant): Long {
        return variantDao.insert(variant)
    }

    suspend fun deleteVariant(vararg variants: Variant) {
        variantDao.deleteComplete(*variants)
    }

    suspend fun updateVariant(vararg variants: Variant) {
        variantDao.update(*variants)
    }

    fun getVariantById(variantId: Long): Flow<Variant?> {
        return variantDao.getById(variantId)
    }


    fun getAllVariants(): Flow<List<Variant>> {
        return variantDao.getAll()
    }

    fun getVariantsByCategoryId(categoryId: Long, parentId: Long = 0): Flow<List<Variant>> {
        return variantDao.getByCategoryId(categoryId, parentId)
    }

    suspend fun getDefaultVariantForCategory(categoryId: Long, workflowId: Long = 0): Variant? {
        val defaultVar: CategoryVariable? =
            getVariable(categoryId, getVariableName(VAR_VARIANT_DEFAULT_VALUE, workflowId)).first()
        if (defaultVar != null) {
            val variant = variantDao.getByValueForCategory(categoryId, defaultVar.value).first()
            if (variant == null) {
                // Delete variable associated with non-existing variant.
                deleteVariable(categoryId, getVariableName(VAR_VARIANT_DEFAULT_VALUE, workflowId))
            } else
                return variant
        }
        return variantDao.getDefaultVariantByCategoryId(categoryId).first()
    }

    suspend fun getDefaultExVariantForCategory(
        categoryId: Long,
        workflowId: Long = 0
    ): List<Variant> {
        val variants = mutableListOf<Variant>()
        val exVariant = getDefaultVariantForCategory(categoryId, workflowId)
        if (exVariant != null) {
            variants.add(exVariant)
            var parentId = exVariant.id
            while (parentId > 0) {
                val childVariants = variantDao.getAllParents(categoryId, parentId).first()
                if (childVariants.isNotEmpty()) {
                    val defaultChildVar: CategoryVariable? =
                        getVariable(
                            categoryId,
                            getVariableName(
                                VAR_VARIANT_DEFAULT_VALUE,
                                workflowId,
                                parentId
                            )
                        ).first()
                    if (defaultChildVar != null) {
                        val childVariant =
                            variantDao.getByValueForCategory(categoryId, defaultChildVar.value)
                                .first()
                        parentId = if (childVariant == null) {
                            // Delete variable associated with non-existing variant.
                            deleteVariable(
                                categoryId,
                                getVariableName(VAR_VARIANT_DEFAULT_VALUE, workflowId, parentId)
                            )
                            variants.add(childVariants[0])
                            childVariants[0].id
                        } else {
                            variants.add(childVariant)
                            childVariant.id
                        }
                    } else {
                        variants.add(childVariants[0])
                        parentId = childVariants[0].id
                    }
                } else {
                    parentId = 0 // Nothing else - break loop
                }
            }
        }
        return variants
    }

    fun getVariantByValue(categoryId: Long, value: String): Flow<Variant?> {
        return variantDao.getByValueForCategory(categoryId, value)
    }

    // AutoIncrement
    suspend fun getCategoryWithAllVariables(categoryId: Long): Pair<Category, List<CategoryVariable>>? {
        val category = getById(categoryId).first() ?: return null
        val allVariables = getAllVariablesForCategory(categoryId).first()
        return Pair(category, allVariables)
    }

    suspend fun createAutoIncrementVariant(categoryId: Long, workflowId: Long = 0): Variant {
        val category = getById(categoryId).first()
            ?: throw UnknownError("Unknown category (${categoryId})")
        if (category.type != CategoryType.AutoIncrement)
            throw RuntimeException("The category is not `AutoIncrement`")
        val currentVar =
            getVariable(categoryId, getVariableName(VAR_AUTOINC_CURRENT, workflowId)).first()
                ?: throw UnknownError(
                    "Unknown variable '${
                        getVariableName(
                            VAR_AUTOINC_CURRENT,
                            workflowId
                        )
                    }' for category '${category.name}'"
                )
        val incrementVar =
            getVariable(categoryId, getVariableName(VAR_AUTOINC_INCREMENT, workflowId)).first()
                ?: throw UnknownError(
                    "Unknown variable '${
                        getVariableName(
                            VAR_AUTOINC_INCREMENT,
                            workflowId
                        )
                    }' for category '${category.name}'"
                )
        val current = currentVar.value
        val newVariant = Variant(
            value = current,
            categoryId = categoryId
        )
        val variantId = insertVariant(newVariant)
        setVariable(
            currentVar.copy(
                value = (current.toLong() + incrementVar.value.toLong()).toString()
            )
        )
        return newVariant.copy(id = variantId)
    }

    suspend fun createGeoVariant(categoryId: Long, location: Location): Variant {
        val category = getById(categoryId).first()
            ?: throw UnknownError("Unknown category (${categoryId})")
        if (category.type != CategoryType.Geo)
            throw RuntimeException("The category is not `Geo`")
        val variant = Variant(
            value = LocationHelper.getFormattedLatLon(location),
            categoryId = categoryId
        )
        val variantId = insertVariant(variant)
        return variant.copy(
            id = variantId
        )
    }

    companion object {
        const val VAR_AUTOINC_CURRENT = "current"
        const val VAR_AUTOINC_INCREMENT = "increment"
//        const val VAR_MINIMUM = "minimum"
//        const val VAR_MAXIMUM = "maximum"

        const val VAR_VARIANT_DEFAULT_VALUE = "default"

        fun getVariableName(varName: String, workflowId: Long = 0, parentId: Long = 0): String =
            if (workflowId > 0) "workflow${workflowId}_${varName}_${parentId}" else "${varName}_${parentId}"
    }
}
